import os
from datetime import datetime

from aiogram import Bot
from aiogram.enums import ParseMode
from dotenv import load_dotenv

from telegram.API import get_special_offers, get_post_list, put_post_last_view_changer

load_dotenv()
GROUP_CHAT_ID = os.getenv('GROUP_CHAT_ID')


def link_generator(link):
    marker = "508478"  # –∞–π–¥–∏ –ø—Ä–æ—Ñ–∏–ª—è Travelpayouts —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞–ª—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ —Å –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏
    res = f"https://aviasales.ru{link}"
    res += f"&marker={marker}"
    return res


def data_formatted(timestamp_str):
    months = {
        '1': '—è–Ω–≤–∞—Ä—è',
        '2': '—Ñ–µ–≤—Ä–∞–ª—è',
        '3': '–º–∞—Ä—Ç–∞',
        '4': '–∞–ø—Ä–µ–ª—è',
        '5': '–º–∞—è',
        '6': '–∏—é–Ω—è',
        '7': '–∏—é–ª—è',
        '8': '–∞–≤–≥—É—Å—Ç–∞',
        '9': '—Å–µ–Ω—Ç—è–±—Ä—è',
        '10': '–æ–∫—Ç—è–±—Ä—è',
        '11': '–Ω–æ—è–±—Ä—è',
        '12': '–¥–µ–∫–∞–±—Ä—è',
    }
    timestamp = datetime.fromisoformat(timestamp_str)

    day = timestamp.day
    month = timestamp.month
    return f"{day} {months.get(str(month))}"


def weekday(timestamp_str):
    week_days = {
        'Monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '—Å—Ä–µ–¥–∞',
        'Thursday': '—á–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ø—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '—Å—É–±–±–æ—Ç–∞',
        'Sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
    }

    day = datetime.fromisoformat(timestamp_str[:-6])
    weekday = day.strftime("%A")

    return f"{week_days.get(str(weekday))}"


def price(price):
    if price is None:
        return None
    else:
        price = f"{int(price): ,}".replace(',', ' ') + " ‚ÇΩ"
        return price


def special_offers_message(post):
    message = f"‚úàÔ∏è  {post['text']}  ‚úàÔ∏è \n \n"
    destinations = package_of_destinations(post)
    for destination in destinations:
        tickets = get_special_offers(destination['origin_code'], destination['destination_code'])
        if tickets:
            for ticket in tickets:
                departure_time = datetime.fromisoformat(ticket['departure_at'][:-6])
                formatted_time = departure_time.strftime("%H:%M")

                message += (f"\n üî•<b>{data_formatted(ticket['departure_at'])}</b> | {formatted_time} | {weekday(ticket['departure_at'])}"
                            f"\n <i>{ticket['origin_name']}({ticket['origin']}) - {ticket['destination_name']}({ticket['destination']})</i>"
                            f"\n üí∏ {price(ticket['price'])}"
                            f"\n <a href='{link_generator(ticket['link'])}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>\n\n")
        else:
            pass

    message += "\n ‚ö†Ô∏è –¶–µ–Ω–∞ –∏ –Ω–∞–ª–∏—á–∏–µ –±–∏–ª–µ—Ç–æ–≤ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
    return message


def package_of_destinations(post_json):
    path_list = post_json['destinations']
    last_index = int(post_json['last_viewed_destination_index'])
    paths_per_batch = int(post_json['count_of_directions_in_post'])

    if not path_list or paths_per_batch <= 0:
        return None, None

    total_paths = len(path_list)
    batch_index = 0
    processed_indices = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
    processed_paths = []

    for i in range(last_index + 1, last_index + 1 + min(paths_per_batch, total_paths)):
        current_index = i % total_paths

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç –∏–Ω–¥–µ–∫—Å
        if current_index in processed_indices:
            continue

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
        processed_indices.add(current_index)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è
        current_path = path_list[current_index]
        processed_paths.append(current_path)


    last_index = str((last_index + min(paths_per_batch, total_paths)) % total_paths)
    put_post_last_view_changer(post_id=post_json['id'], new_last_view=last_index)  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—É—Ç–µ–π (–∫–∞–∫ —Å–ø–∏—Å–æ–∫)
    return processed_paths


async def special_offers(bot: Bot):
    posts = get_post_list()
    for post in posts:
        chat_id = post['chanel']["chanel_chat_id"]
        message = special_offers_message(post)
        if message:
            await bot.send_message(chat_id=chat_id,
                                   text=message,
                                   parse_mode=ParseMode.HTML,
                                   disable_web_page_preview=True,
                                   protect_content=False)

    # except Exception as e:
    #     await bot.send_message(chat_id='-1001956834579',
    #                            text=str(e),
    #                            parse_mode=ParseMode.MARKDOWN,
    #                            disable_web_page_preview=True,
    #                            protect_content=False)
