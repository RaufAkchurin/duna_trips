import os
from datetime import datetime

from aiogram import Bot
from aiogram.enums import ParseMode
from dotenv import load_dotenv

from telegram.API import get_special_offers, get_post_list

load_dotenv()
GROUP_CHAT_ID = os.getenv('GROUP_CHAT_ID')


def link_generator(link):
    marker = "508478"  # –∞–π–¥–∏ –ø—Ä–æ—Ñ–∏–ª—è Travelpayouts —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞–ª—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ —Å –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏
    res = f"https://aviasales.ru{link}"
    res += f"&marker={marker}"
    return res


def data_formatted(timestamp_str):
    timestamp_str = timestamp_str

    months = {
        '1': '—è–Ω–≤–∞—Ä—è',
        '2': '—Ñ–µ–≤—Ä–∞–ª—è',
        '3': '–º–∞—Ä—Ç–∞',
        '4': '–∞–ø—Ä–µ–ª—è',
        '5': '–º–∞—è',
        '6': '–∏—é–Ω—è',
        '7': '–∏—é–ª—è',
        '8': '–∞–≤–≥—É—Å—Ç–∞',
        '9': '—Å–µ–Ω—Ç—è–±—Ä—è',
        '10': '–æ–∫—Ç—è–±—Ä—è',
        '11': '–Ω–æ—è–±—Ä—è',
        '12': '–¥–µ–∫–∞–±—Ä—è',
    }
    timestamp = datetime.fromisoformat(timestamp_str)

    day = timestamp.day
    month = timestamp.month
    return f"{day} {months.get(str(month))}"


def special_offers_message(post):
    message = f"‚úàÔ∏è  {post['text']}  ‚úàÔ∏è \n \n"

    destinations = package_of_destinations(post)
    for destination in destinations:
        tickets = get_special_offers(destination['origin_code'], destination['destination_code'])
        if tickets:
            for ticket in tickets:
                message += (f"üî•{data_formatted(ticket['departure_at'])} "
                            f"–∏–∑ {ticket['origin_name_declined']} {ticket['destination_name_declined']} "
                            f"–∑–∞ {ticket['price']} —Ä [—Å—Å—ã–ª–∫–∞]({link_generator(ticket['link'])}) \n")
        else:
            pass

    message += "\n ‚ö†Ô∏è –¶–µ–Ω–∞ –∏ –Ω–∞–ª–∏—á–∏–µ –±–∏–ª–µ—Ç–æ–≤ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
    return message


def package_of_destinations(post_json):
    lst = post_json['destinations']
    count_of_directions_in_post = int(post_json['count_of_directions_in_post'])
    index = post_json['last_viewed_destination_index']

    if not lst:
        print("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    list_length = len(lst)
    iterations = 0  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π

    while iterations < list_length:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
        package_of_destinations = lst[index:index + count_of_directions_in_post]

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—Ä—É–≥–æ–≤–æ–π –ø–µ—Ä–µ—Ö–æ–¥
        index = (index + 5) % list_length

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
        iterations += 1

    return package_of_destinations


async def special_offers(bot: Bot):
    posts = get_post_list()

    try:
        for post in posts:
            chat_id = post['chanel']["chanel_chat_id"]
            message = special_offers_message(post)
            if message:
                await bot.send_message(chat_id=chat_id,
                                       text=message,
                                       parse_mode=ParseMode.MARKDOWN,
                                       disable_web_page_preview=True,
                                       protect_content=False)
    except Exception as e:
        await bot.send_message(chat_id='-1001956834579',
                               text=e,
                               parse_mode=ParseMode.MARKDOWN,
                               disable_web_page_preview=True,
                               protect_content=False)
